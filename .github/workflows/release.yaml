on:
    push:
        branches:
            - master

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.event.repository.name }}
    PACKAGE_NAME: ${{ github.event.repository.name }}
    NPM_MODULE_NAME: "@johnqh/wildduck"

name: release
jobs:
    check_for_release:
        runs-on: ubuntu-latest
        outputs:
            should_release: ${{ steps.check.outputs.should_release }}
            version: ${{ steps.check.outputs.version }}
            version_tag: ${{ steps.check.outputs.version_tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check if commit should trigger release
              id: check
              run: |
                  # Get the latest commit message
                  COMMIT_MSG=$(git log -1 --pretty=%s)
                  echo "Commit message: $COMMIT_MSG"
                  
                  # Check if commit follows conventional commit format and is not a chore
                  if [[ "$COMMIT_MSG" =~ ^(feat|fix|perf|refactor)(\(.+\))?!?:.*$ ]] && [[ "$COMMIT_MSG" != chore* ]]; then
                    echo "should_release=true" >> $GITHUB_OUTPUT
                    
                    # Get current version from package.json
                    CURRENT_VERSION=$(node -p "require('./package.json').version")
                    
                    # Determine version bump based on commit message
                    if [[ "$COMMIT_MSG" =~ ^feat.*$ ]] || [[ "$COMMIT_MSG" =~ .*!:.*$ ]]; then
                      # Minor version bump for features or breaking changes
                      NEW_VERSION=$(node -p "
                        const v = require('./package.json').version.split('.');
                        v[1] = (parseInt(v[1]) + 1).toString();
                        v[2] = '0';
                        v.join('.')
                      ")
                    elif [[ "$COMMIT_MSG" =~ ^fix.*$ ]]; then
                      # Patch version bump for fixes
                      NEW_VERSION=$(node -p "
                        const v = require('./package.json').version.split('.');
                        v[2] = (parseInt(v[2]) + 1).toString();
                        v.join('.')
                      ")
                    else
                      # Default to patch bump
                      NEW_VERSION=$(node -p "
                        const v = require('./package.json').version.split('.');
                        v[2] = (parseInt(v[2]) + 1).toString();
                        v.join('.')
                      ")
                    fi
                    
                    echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
                    echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
                    echo "Will release version: $NEW_VERSION"
                  else
                    echo "should_release=false" >> $GITHUB_OUTPUT
                    echo "Commit does not warrant a release: $COMMIT_MSG"
                  fi

    release_npm:
        needs: check_for_release
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}
        runs-on: ubuntu-latest
        permissions:
            contents: write
            id-token: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  registry-url: 'https://registry.npmjs.org'

            - name: Update package version
              run: |
                  npm version ${{ needs.check_for_release.outputs.version }} --no-git-tag-version
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add package.json package-lock.json
                  git commit -m "chore: bump version to ${{ needs.check_for_release.outputs.version }} [skip ci]"
                  git push

            - name: Install dependencies
              run: npm ci

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ needs.check_for_release.outputs.version_tag }}
                  name: Release ${{ needs.check_for_release.outputs.version }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Publish to NPM
              run: npm publish --provenance --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    publish_docker:
        name: Create and publish a Docker image
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write

        needs: [check_for_release, release_npm]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}

        steps:
            - run: echo version ${{needs.check_for_release.outputs.version_tag}}

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: 'arm64'

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: linux/arm64,linux/amd64

            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{secrets.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}
                  flavor: |
                      latest=auto
                  tags: |
                      type=semver,pattern={{version}},value=${{needs.check_for_release.outputs.version_tag}}
                      type=semver,pattern={{major}}.{{minor}},value=${{needs.check_for_release.outputs.version_tag}}
                      type=semver,pattern={{major}},value=${{needs.check_for_release.outputs.version_tag}}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  platforms: ${{ steps.buildx.outputs.platforms }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{secrets.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}

    publish_artifacts:
        name: Package and upload release artifacts
        runs-on: ubuntu-latest
        needs: [check_for_release, release_npm]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install dependencies
              run: npm install --omit=dev

            - name: Move files to temporary directory
              run: |
                  mkdir -p ${{ runner.temp }}/release_build
                  cp -R . ${{ runner.temp }}/release_build/

            - name: Create zip archive
              run: |
                  # Create a zip archive excluding .git directory
                  ROOT_DIR=$(pwd)
                  cd ${{ runner.temp }}/release_build
                  zip -r $ROOT_DIR/${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.zip . -x "*.git" "*.git/*"
                  cd $ROOT_DIR

            - name: Create tar.gz archive
              run: |
                  # Create a tar.gz archive excluding .git directory
                  tar --exclude='.git' --exclude='.git/*' -czf ${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.tar.gz -C ${{ runner.temp }}/release_build/ .

            - name: Upload artifacts to release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      ${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.zip
                      ${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.tar.gz
                  tag_name: ${{needs.check_for_release.outputs.version_tag}}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
