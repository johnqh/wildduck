on:
    push:
        branches:
            - master
            - main
    pull_request:
        branches:
            - master
            - main
        types: [closed]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.event.repository.name }}
    PACKAGE_NAME: ${{ github.event.repository.name }}
    NPM_MODULE_NAME: "@0xmail/wildduck"

name: CI/CD - Test and Release
jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        services:
            redis:
                image: redis
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379
        steps:
            - uses: actions/checkout@v4

            - name: Start MongoDB
              uses: supercharge/mongodb-github-action@1.7.0
              with:
                  mongodb-version: 6.0
                  mongodb-port: 27017
                  mongodb-db: wildduck-test

            - name: Use Node.js 18
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Install mongosh
              run: |
                  sudo apt-get update
                  sudo apt-get install -y wget gnupg
                  wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
                  echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
                  sudo apt-get update
                  sudo apt-get install -y mongodb-mongosh

            - run: npm install
            - name: Run tests
              run: NODE_ENV=test npx grunt testonly --force
              env:
                  APPCONF_dbs_redis: redis://127.0.0.1:6379/1
                  APPCONF_dbs_mongodb: 'mongodb://127.0.0.1:27017/wildduck-test?authSource=admin'

    check_for_release:
        runs-on: ubuntu-latest
        outputs:
            should_release: ${{ steps.check.outputs.should_release }}
            version: ${{ steps.check.outputs.version }}
            version_tag: ${{ steps.check.outputs.version_tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check if should trigger release
              id: check
              run: |
                  # Skip only if explicitly marked with [skip ci] or [skip-ci]
                  COMMIT_MSG=$(git log -1 --pretty=%s)
                  echo "Commit message: $COMMIT_MSG"
                  
                  # Skip release only for PR events that weren't merged
                  if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.event.action }}" != "closed" || "${{ github.event.pull_request.merged }}" != "true" ]]; then
                    echo "should_release=false" >> $GITHUB_OUTPUT
                    echo "PR not merged, skipping release"
                    exit 0
                  fi
                  
                  # Skip only if explicitly marked to skip CI
                  if [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[skip-ci]"* ]]; then
                    echo "should_release=false" >> $GITHUB_OUTPUT
                    echo "Commit marked to skip CI: $COMMIT_MSG"
                  else
                    echo "should_release=true" >> $GITHUB_OUTPUT
                    
                    # Get current version from package.json
                    CURRENT_VERSION=$(node -p "require('./package.json').version")
                    
                    echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "version_tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "Will release version: $CURRENT_VERSION for commit: $COMMIT_MSG"
                  fi

    release_npm:
        needs: [test, check_for_release]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}
        runs-on: ubuntu-latest
        permissions:
            contents: write
            id-token: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  registry-url: 'https://registry.npmjs.org'

            - name: Verify package version
              run: |
                  echo "Using version: ${{ needs.check_for_release.outputs.version }}"
                  echo "Package.json version: $(node -p "require('./package.json').version")"

            - name: Install dependencies
              run: npm ci

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ needs.check_for_release.outputs.version_tag }}
                  name: Release ${{ needs.check_for_release.outputs.version }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Publish to NPM
              run: npm publish --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Notify deployment success
              if: success()
              run: |
                  curl -X POST -H 'Content-type: application/json' \
                  --data '{"channel":"wildduck-changelog", "text":"üöÄ *Release ${{ needs.check_for_release.outputs.version }}* deployed successfully!\n‚Ä¢ NPM: https://www.npmjs.com/package/@0xmail/wildduck/v/${{ needs.check_for_release.outputs.version }}\n‚Ä¢ Docker: `docker pull ${{ secrets.DOCKERHUB_USERNAME }}/wildduck:${{ needs.check_for_release.outputs.version_tag }}`\n‚Ä¢ GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check_for_release.outputs.version_tag }}"}' \
                  ${{ secrets.ZONE_WEBHOOK_URL }} || echo "Slack notification failed"

            - name: Notify deployment failure  
              if: failure()
              run: |
                  curl -X POST -H 'Content-type: application/json' \
                  --data '{"channel":"wildduck-changelog", "text":"‚ùå *Release deployment FAILED* for commit ${{ github.sha }}\nCheck: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
                  ${{ secrets.ZONE_WEBHOOK_URL }} || echo "Slack notification failed"

    publish_docker:
        name: Create and publish a Docker image
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write

        needs: [test, check_for_release, release_npm]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}

        steps:
            - run: echo version ${{needs.check_for_release.outputs.version_tag}}

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: 'arm64'

            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: linux/arm64,linux/amd64

            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{secrets.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}
                  flavor: |
                      latest=auto
                  tags: |
                      type=semver,pattern={{version}},value=${{needs.check_for_release.outputs.version_tag}}
                      type=semver,pattern={{major}}.{{minor}},value=${{needs.check_for_release.outputs.version_tag}}
                      type=semver,pattern={{major}},value=${{needs.check_for_release.outputs.version_tag}}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  platforms: ${{ steps.buildx.outputs.platforms }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              if: ${{ !github.event.repository.private }}
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{secrets.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}

    publish_artifacts:
        name: Package and upload release artifacts
        runs-on: ubuntu-latest
        needs: [test, check_for_release, release_npm]
        if: ${{ needs.check_for_release.outputs.should_release == 'true' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install dependencies
              run: npm install --omit=dev

            - name: Move files to temporary directory
              run: |
                  mkdir -p ${{ runner.temp }}/release_build
                  cp -R . ${{ runner.temp }}/release_build/

            - name: Create zip archive
              run: |
                  # Create a zip archive excluding .git directory
                  ROOT_DIR=$(pwd)
                  cd ${{ runner.temp }}/release_build
                  zip -r $ROOT_DIR/${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.zip . -x "*.git" "*.git/*"
                  cd $ROOT_DIR

            - name: Create tar.gz archive
              run: |
                  # Create a tar.gz archive excluding .git directory
                  tar --exclude='.git' --exclude='.git/*' -czf ${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.tar.gz -C ${{ runner.temp }}/release_build/ .

            - name: Upload artifacts to release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      ${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.zip
                      ${{env.PACKAGE_NAME}}-${{needs.check_for_release.outputs.version}}.tar.gz
                  tag_name: ${{needs.check_for_release.outputs.version_tag}}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    deployment_status:
        name: Deployment Status Summary
        runs-on: ubuntu-latest
        needs: [test, check_for_release, release_npm, publish_docker, publish_artifacts]
        if: always() && needs.check_for_release.outputs.should_release == 'true'
        steps:
            - name: Generate deployment report
              run: |
                  echo "# Deployment Status Report" >> $GITHUB_STEP_SUMMARY
                  echo "**Version:** ${{ needs.check_for_release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Tag:** ${{ needs.check_for_release.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Component Status:" >> $GITHUB_STEP_SUMMARY
                  
                  if [ "${{ needs.release_npm.result }}" = "success" ]; then
                    echo "‚úÖ **NPM Package:** Published successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - URL: https://www.npmjs.com/package/@0xmail/wildduck/v/${{ needs.check_for_release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **NPM Package:** Failed to publish" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_docker.result }}" = "success" ]; then
                    echo "‚úÖ **Docker Image:** Built and pushed successfully" >> $GITHUB_STEP_SUMMARY
                    echo "   - Image: \`docker pull johnqh/wildduck:${{ needs.check_for_release.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **Docker Image:** Failed to build/push" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ needs.publish_artifacts.result }}" = "success" ]; then
                    echo "‚úÖ **GitHub Release:** Created with artifacts" >> $GITHUB_STEP_SUMMARY
                    echo "   - URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check_for_release.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "‚ùå **GitHub Release:** Failed to create" >> $GITHUB_STEP_SUMMARY
                  fi
